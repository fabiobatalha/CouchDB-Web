========================
schematize module tests
========================

----------------------
FieldStats smoke test
----------------------

    >>> import sys
    >>> from schematize import FieldStats, statistics, schematize
    >>> blank = FieldStats(10)
    >>> (blank.frequency, blank.max_occurrences)
    (0, 0)
    >>> blank.min_occurrences == sys.maxsize
    True

-----------------
statistics tests
-----------------

    >>> db = [
    ...       {"10" : ["Machado de Assis^y1839-1908^rauthor"], 
    ...        "12" : ["Memorial de Aires"],
    ...        "99" : ["P"]},
    ...       {"10" : ["Jorge Luis Borges^y1899-1986"],
    ...        "12" : ["Ficciones"],
    ...        "69" : ["9788423336715"],
    ...        "99" : ["C"]},
    ...       {"10" : ["Lewis Carroll^y1832-1898^rauthor", 
    ...                "John Tenniel^y1820-1914^rillustrator", 
    ...                "Martin Gardner^y1914-2010^reditor"],
    ...        "12" : ["The Annotated Alice^sThe Definitive Edition"],
    ...        "69" : ["9780393048476"],
    ...        "88" : ["illustrated"],
    ...        "99" : ["C"]},
    ... ]
    >>> len(db)
    3
    >>> total, analysed, stats = statistics(db)
    >>> total, analysed, len(stats)
    (3, 3, 5)

Checking on field tag 10:

    >>> fld = stats[10]
    >>> (fld.frequency, fld.min_occurrences, fld.max_occurrences)
    (3, 1, 3)
    >>> (fld.min_len, fld.max_len)
    (28, 36)
    >>> (fld.is_numeric(), fld.is_repeating(), fld.is_fixed_len())
    (False, True, False)
    >>> fld.subfield_markers()
    'ry'
    >>> fld.subfield_freqs()
    [('r', 4), ('y', 5)]
    >>> for s, q, p in fld.subfield_freqs_pct():
    ...     print('%s %3d %5.1f' % (s, q, p))
    r   4  80.0
    y   5 100.0

Checking on field tag 12:    

    >>> fld = stats[12]
    >>> (fld.frequency, fld.min_occurrences, fld.max_occurrences)
    (3, 1, 1)
    >>> (fld.min_len, fld.max_len)
    (9, 43)
    >>> (fld.is_numeric(), fld.is_repeating(), fld.is_fixed_len())
    (False, False, False)
    >>> fld.subfield_markers()
    's'
    >>> fld.subfield_freqs()
    [('s', 1)]
    >>> for s, q, p in fld.subfield_freqs_pct():
    ...     print('%s %3d %5.1f' % (s, q, p))
    s   1  33.3

Checking on field tag 69:    

    >>> fld = stats[69]
    >>> (fld.frequency, fld.min_occurrences, fld.max_occurrences)
    (2, 1, 1)
    >>> (fld.min_len, fld.max_len, fld.numeric)
    (13, 13, True)
    >>> (fld.is_numeric(), fld.is_repeating(), fld.is_fixed_len())
    (True, False, True)
    >>> fld.subfield_markers()
    ''
    >>> fld.subfield_freqs()
    []

----------------
schematize test
----------------

    >>> print(schematize(db, indent=8))
    class SampleType(CheckedModel):
            v10 = PluralProperty(tag='10', required=True,
                            subfields='ry')
            v12 = SingularProperty(tag='12', required=True,
                            subfields='s')
            v69 = SingularProperty(tag='69', unique=True,
                            numeric=True,
                            fixed_len=13)
            v88 = SingularProperty(tag='88', unique=True,
                            fixed_len=11)
            v99 = SingularProperty(tag='99', required=True,
                            fixed_len=1)
    <BLANKLINE>
    # 3 records analyzed out of 3 total records
    # 5 properties generated out of 5 distinct tags found
    # 2 candidate key properties detected


Uncommon fields can be ommitted using the quorum argument:

    >>> print(schematize(db, quorum=3, indent=8))
    class SampleType(CheckedModel):
            v10 = PluralProperty(tag='10', required=True,
                            subfields='ry')
            v12 = SingularProperty(tag='12', required=True,
                            subfields='s')
            v99 = SingularProperty(tag='99', required=True,
                            fixed_len=1)
    <BLANKLINE>
    # 3 records analyzed out of 3 total records
    # 3 properties generated out of 5 distinct tags found
    # 0 candidate key properties detected
    # 2 uncommon tags omitted from model

--------------------------
filtered schematize tests
--------------------------

    >>> print(schematize(db, filter_tag='99', filter_value='P', indent=8))
    class TypeP(CheckedModel):
            v10 = SingularProperty(tag='10', required=True,
                            unique=True,
                            subfields='ry',
                            fixed_len=35)
            v12 = SingularProperty(tag='12', required=True,
                            unique=True,
                            fixed_len=17)
    <BLANKLINE>
    # 1 records analyzed out of 3 total records
    # 2 properties generated out of 3 distinct tags found
    # 2 candidate key properties detected
    # filter tag 99 omitted from model
    >>> print(schematize(db, filter_tag='99', filter_value='C', indent=8))
    class TypeC(CheckedModel):
            v10 = PluralProperty(tag='10', required=True,
                            subfields='ry')
            v12 = SingularProperty(tag='12', required=True,
                            subfields='s')
            v69 = SingularProperty(tag='69', required=True,
                            unique=True,
                            numeric=True,
                            fixed_len=13)
            v88 = SingularProperty(tag='88', unique=True,
                            fixed_len=11)
    <BLANKLINE>
    # 2 records analyzed out of 3 total records
    # 4 properties generated out of 5 distinct tags found
    # 2 candidate key properties detected
    # filter tag 99 omitted from model
